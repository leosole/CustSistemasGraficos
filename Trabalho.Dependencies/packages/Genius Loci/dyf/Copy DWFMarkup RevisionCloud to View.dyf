<Workspace Version="1.3.4.6666" X="-201.905568857423" Y="160.094118871667" zoom="0.538046297688571" ScaleFactor="1" Name="Copy DWFMarkup RevisionCloud to View" Description="Copies the revision cloud from the Markup objects for the given or active sheet.&#xD;&#xA;Also copies the markup notes to the comments of the created revision cloud.&#xD;&#xA;Please note that markups are found by name (label) and therefore depend on the Revit localization (language)." ID="12adfdc5-4194-4b38-8799-795ee363cfd4" Category="GeniusLoci.DWF">
  <NamespaceResolutionMap>
    <ClassMap partialName="Revit.Application.Document.Current" resolvedName="Revit.Application.Document" assemblyName="RevitNodes.dll" />
    <ClassMap partialName="Revit.Application.Document" resolvedName="Revit.Application.Document" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="e9a3431d-a0e4-4399-98b6-a6ce1e306d9a" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1007.40774412013" y="215.338682693816" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x[0];&#xA;x[1];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <PythonNodeModels.PythonNode guid="9f77133a-cf74-4a2d-bd4a-482c42ebb3a4" type="PythonNodeModels.PythonNode" nickname="Python Script" x="783.00774412013" y="211.125349360483" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
# Import RevitAPI Classes
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

# Import DocumentManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)
#Import Collections
from System.Collections.Generic import List
import System

doc = DocumentManager.Instance.CurrentDBDocument
activeView = UnwrapElement(IN[0])

filters = List[ElementFilter]()
pvp = ParameterValueProvider(ElementId(BuiltInParameter.IMPORT_SYMBOL_NAME))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"nuage",False)))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"cloud",False)))
orFilter = LogicalOrFilter(filters)

TransactionManager.Instance.EnsureInTransaction(doc)
viewports=[doc.GetElement(vip) for vip in activeView.GetAllViewports()]	
for vp in viewports:
	view=doc.GetElement(vp.ViewId)
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan or view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		scale=vp.get_Parameter(BuiltInParameter.VIEW_SCALE).AsInteger()
		trans1 = SubTransaction(doc)
		trans1.Start()
		try:
			view.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION).Set(1)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Sections),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_CLines),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Grids),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Levels),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Callouts),True)
		except:pass
		BC = vp.GetBoxCenter()
		if view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
			viewCenter= (view.CropBox.Min + view.CropBox.Max)/2
			origin = view.CropBox.Transform.Origin
			if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
				VC = origin + XYZ(viewCenter.X,0,viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
				VC = origin + XYZ(-viewCenter.X,0,viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
				VC = origin + XYZ(0,-viewCenter.X, viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
				VC = origin + XYZ(0,viewCenter.X,viewCenter.Y)
		else:
			VC = (view.CropBox.Min + view.CropBox.Max)/2
		trans1.RollBack()

dwfMarkups = FilteredElementCollector(doc, activeView.Id).OfClass(ImportInstance).WhereElementIsNotElementType().WherePasses(orFilter).ToElements()

revisionId = FilteredElementCollector(doc).OfClass(Revision).FirstElementId()

revisions=[]
for dwf in dwfMarkups:
	comment=dwf.get_Parameter(BuiltInParameter.MARKUPS_HISTORY).AsString()
	curves = List[Curve]()
	bbox=dwf.BoundingBox[activeView]
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan:
		pt1 = VC + XYZ((bbox.Min-BC).X * scale, (bbox.Min-BC).Y * scale, 0)
		pt2 = VC + XYZ((bbox.Min-BC).X * scale, (bbox.Max-BC).Y * scale, 0)
		pt3 = VC + XYZ((bbox.Max-BC).X * scale, (bbox.Max-BC).Y * scale, 0)
		pt4 = VC + XYZ((bbox.Max-BC).X * scale, (bbox.Min-BC).Y * scale, 0)
	elif view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
			pt1 = VC + XYZ((bbox.Min-BC).X * scale,0, (bbox.Min-BC).Y * scale)
			pt2 = VC + XYZ((bbox.Min-BC).X * scale,0, (bbox.Max-BC).Y * scale)
			pt3 = VC + XYZ((bbox.Max-BC).X * scale,0, (bbox.Max-BC).Y * scale)
			pt4 = VC + XYZ((bbox.Max-BC).X * scale,0, (bbox.Min-BC).Y * scale)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
			pt1 = VC + XYZ((-bbox.Min+BC).X * scale,0, (bbox.Min-BC).Y * scale)
			pt2 = VC + XYZ((-bbox.Min+BC).X * scale,0, (bbox.Max-BC).Y * scale)
			pt3 = VC + XYZ((-bbox.Max+BC).X * scale,0, (bbox.Max-BC).Y * scale)
			pt4 = VC + XYZ((-bbox.Max+BC).X * scale,0, (bbox.Min-BC).Y * scale)
		elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
			pt1 = VC + XYZ(0,(BC-bbox.Min).X * scale, (bbox.Min-BC).Y * scale)
			pt2 = VC + XYZ(0,(BC-bbox.Min).X * scale, (bbox.Max-BC).Y * scale)
			pt3 = VC + XYZ(0,(BC-bbox.Max).X * scale, (bbox.Max-BC).Y * scale)
			pt4 = VC + XYZ(0,(BC-bbox.Max).X * scale, (bbox.Min-BC).Y * scale)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
			pt1 = VC + XYZ(0,(bbox.Min-BC).X * scale, (bbox.Min-BC).Y * scale)
			pt2 = VC + XYZ(0,(bbox.Min-BC).X * scale, (bbox.Max-BC).Y * scale)
			pt3 = VC + XYZ(0,(bbox.Max-BC).X * scale, (bbox.Max-BC).Y * scale)
			pt4 = VC + XYZ(0,(bbox.Max-BC).X * scale, (bbox.Min-BC).Y * scale)
	curves.Add(Line.CreateBound(pt1, pt2))
	curves.Add(Line.CreateBound(pt2, pt3))
	curves.Add(Line.CreateBound(pt3, pt4))
	curves.Add(Line.CreateBound(pt4, pt1))
	cloud=RevisionCloud.Create(doc,view,revisionId,curves)
	cloudComments=cloud.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(comment)
	revisions.append(cloud)
	
TransactionManager.Instance.TransactionTaskDone()

OUT = dwfMarkups,revisions</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d0f4065f-5066-4481-aa3a-66814b002e01" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="149.40774412013" y="211.125349360483" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="sheet:var[]..[]=Revit.Application.Document.Current.ActiveView" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="760954a1-4adb-45f2-97ce-8e8841cef929" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1198.60774412013" y="177.912016027149" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="DWFMarkup" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="9292dcbc-761a-46df-86d5-d21edeec7c98" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1198.60774412013" y="261.912016027149" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="RevisionCloud" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="e9a3431d-a0e4-4399-98b6-a6ce1e306d9a" start_index="0" end="760954a1-4adb-45f2-97ce-8e8841cef929" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e9a3431d-a0e4-4399-98b6-a6ce1e306d9a" start_index="1" end="9292dcbc-761a-46df-86d5-d21edeec7c98" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9f77133a-cf74-4a2d-bd4a-482c42ebb3a4" start_index="0" end="e9a3431d-a0e4-4399-98b6-a6ce1e306d9a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d0f4065f-5066-4481-aa3a-66814b002e01" start_index="0" end="9f77133a-cf74-4a2d-bd4a-482c42ebb3a4" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>