<Workspace Version="1.3.4.6666" X="0" Y="0" zoom="1" ScaleFactor="1" Name="SelectByType" Description="Get the instances of the given type. Works with ElementType, FamilyType, ViewFamilyType, Wall/Floor/Roof/CeilingType, GroupType, FilledRegionType and TextNoteType." ID="112c4aec-7e86-4278-b3cf-275124e60b27" Category="GeniusLoci.Select">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="1cea2b92-71e2-48fb-860b-73bc1a7aca73" type="PythonNodeModels.PythonNode" nickname="Python Script" x="240.8" y="287.2" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com
#https://github.com/albandechasteigner/GeniusLociForDynamo

import clr
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *
clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
import System

def tolist(x):
    if hasattr(x,'__iter__'): return x
    else : return [x]

cats = tolist(UnwrapElement(IN[0]))
inputdocs = tolist(UnwrapElement(IN[1]))

#Inspired by Clockwork
for inputdoc in inputdocs :
	if inputdoc == None:
		doc = DocumentManager.Instance.CurrentDBDocument
	elif isinstance (inputdoc, Document):
		doc = inputdoc
	elif isinstance (inputdoc, RevitLinkInstance):
		doc = inputdoc.GetLinkDocument()
	else: doc = DocumentManager.Instance.CurrentDBDocument

provider = ParameterValueProvider(ElementId(BuiltInParameter.ELEM_FAMILY_PARAM))
provider2 = ParameterValueProvider(ElementId(BuiltInParameter.ELEM_TYPE_PARAM))
evaluator = FilterNumericEquals()
elements = []

for cat in cats:
	if isinstance(cat, Category) :
		collector = FilteredElementCollector(doc).OfCategoryId(cat.Id).WhereElementIsNotElementType().ToElements()
	elif isinstance(cat, System.Type) : 
		collector = FilteredElementCollector(doc).OfClass(cat).ToElements()
	elif isinstance(cat, FamilySymbol) or isinstance(cat,Autodesk.Revit.DB.FilledRegionType) :
		filter = ElementParameterFilter(FilterElementIdRule(provider, evaluator, cat.Id))	
		collector = FilteredElementCollector(doc).OfCategoryId(cat.Category.Id).WherePasses(filter).ToElements()
	elif isinstance(cat,TextNoteType):
		collector = FilteredElementCollector(doc).OfClass(TextNote).WhereElementIsNotElementType().ToElements().FindAll(lambda x : x.GetTypeId() == cat.Id)
	elif isinstance(cat,ModelTextType):
		collector = FilteredElementCollector(doc).OfClass(ModelText).WhereElementIsNotElementType().ToElements().FindAll(lambda x : x.GetTypeId() == cat.Id)
	elif isinstance(cat, HostObjAttributes):
		filter = ElementParameterFilter(FilterElementIdRule(provider2, evaluator, cat.Id))	
		collector = FilteredElementCollector(doc).OfCategoryId(cat.Category.Id).WherePasses(filter).ToElements()
	elif isinstance(cat, ViewFamilyType) :
		collector = FilteredElementCollector(doc).OfClass(View).WhereElementIsNotElementType().ToElements().FindAll(lambda x : x.GetTypeId() == cat.Id)
	elif isinstance(cat, GroupType):
		collector = [c for c in cat.Groups]
	elements.append(collector)

if isinstance(IN[0], list) : OUT = elements
else: OUT = elements[0]</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d8b61266-f41b-4005-b585-c4a16befc70c" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="138" y="288" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="type" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="d331487c-6f9c-46d1-aba3-587503b88bcf" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="414.4" y="286.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ff2cee78-ad77-49ac-988a-2e7901845214" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-206.4" y="358.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Use only if you want to query a linked model&#xD;&#xA;docOrRevitLinkInstance : var[]..[] = null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="1cea2b92-71e2-48fb-860b-73bc1a7aca73" start_index="0" end="d331487c-6f9c-46d1-aba3-587503b88bcf" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d8b61266-f41b-4005-b585-c4a16befc70c" start_index="0" end="1cea2b92-71e2-48fb-860b-73bc1a7aca73" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ff2cee78-ad77-49ac-988a-2e7901845214" start_index="0" end="1cea2b92-71e2-48fb-860b-73bc1a7aca73" end_index="1" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>