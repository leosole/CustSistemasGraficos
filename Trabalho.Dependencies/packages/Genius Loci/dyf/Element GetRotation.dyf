<Workspace Version="1.3.4.6666" X="0" Y="0" zoom="1" ScaleFactor="1" Name="Element GetRotation" Description="Calculates the rotation angle between the given element and the X axis.&#xD;&#xA;Works for point/ line/ sketch based elements and link instances." ID="1e33ecff-42cd-41a3-8cac-d414dcc8fde9" Category="GeniusLoci.Element">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="b8acc724-744e-4a99-b3e8-2022c971aa6f" type="PythonNodeModels.PythonNode" nickname="Python Script" x="276" y="228.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com
#https://github.com/albandechasteigner/GeniusLociForDynamo

import clr
import math
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *
clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.GeometryConversion)

items = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]

def GetRotation(item):
	# Dynamo lines
	if hasattr(item, "Explode"):
		vector = item.ToRevitType().Direction
		rotationAngle = math.degrees(vector.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ))
	# CropBox	
	elif item.Category == None :
		view=item.Document.GetElement(item.get_Parameter(BuiltInParameter.ID_PARAM).AsElementId())
		line=view.GetCropRegionShapeManager().GetCropShape()
		vector = [l.Direction for l in line[0]]
		rotationAngle = math.degrees(vector[1].AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ))
	elif hasattr(item, "Location"):
		loc = item.Location
		if loc:	
			# point-based elements (e.g. most loadable families)
			if isinstance(loc,LocationPoint):
				if hasattr(loc, "Rotation"):
					rotationAngle = math.degrees(loc.Rotation)
				# Group, assembly
				else:rotationAngle = 0
			# Annotation symbol, importInstance and linkInstance
			elif hasattr(item, "GetTotalTransform"):
				trans=item.GetTotalTransform()
				rotationAngle = math.degrees(trans.BasisX.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ))
				rotationAngle=abs(rotationAngle-360)
			# line-based elements (e.g. walls)
			elif isinstance(loc,LocationCurve):
				vector = loc.Curve.Direction
				rotationAngle = math.degrees(vector.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ))
			else:
				# sketch-based elements (ceiling, floor and roof)
				if hasattr(item, "FindInserts"):
					for ref in HostObjectUtils.GetTopFaces(item):
						geomFace=item.GetGeometryObjectFromReference(ref)
						#Get BoundingBox max UV point
						maxUV = geomFace.GetBoundingBox().Max
						#Get transform
						trans=geomFace.ComputeDerivatives(maxUV)
						if isinstance(item,Ceiling):
							rotationAngle = math.degrees(abs(trans.BasisZ.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ)-2*math.pi))
						else:
							rotationAngle = math.degrees(abs(trans.BasisY.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ)-math.pi))
				else:
					rotationAngle=0
		else:
			rotationAngle=0
	if round(rotationAngle,3)==360:
		rotationAngle=0
	return round(rotationAngle,3)
	
rotations = [GetRotation(x) for x in items]

if isinstance(IN[0], list): OUT = rotations
else: OUT = rotations[0]</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="45294bf0-4385-499a-adf0-1599385cd2e2" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="29.1999999999999" y="225.2" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//element or Dynamo line&#xD;&#xA;element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="ae5c4d56-2711-498e-8f05-d075ea050667" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="430.4" y="229.6" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="//Angle&#xD;&#xA;Degree" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="b8acc724-744e-4a99-b3e8-2022c971aa6f" start_index="0" end="ae5c4d56-2711-498e-8f05-d075ea050667" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="45294bf0-4385-499a-adf0-1599385cd2e2" start_index="0" end="b8acc724-744e-4a99-b3e8-2022c971aa6f" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>