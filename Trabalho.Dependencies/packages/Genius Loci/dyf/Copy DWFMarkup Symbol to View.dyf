<Workspace Version="1.3.4.6666" X="-159.008999098145" Y="126.963976098422" zoom="0.48391633011669" ScaleFactor="1" Name="Copy DWFMarkup Symbol to View" Description="Place a family instance from the location of the Markup symbol for the given or active sheet.&#xD;&#xA;Please note : A family type with a name similar to that of the markup symbol (label) should be loaded into the document." ID="43e02ebe-e31b-41ad-9d75-a37787ba2d56" Category="GeniusLoci.DWF">
  <NamespaceResolutionMap>
    <ClassMap partialName="Revit.Application.Document.Current" resolvedName="Revit.Application.Document" assemblyName="RevitNodes.dll" />
    <ClassMap partialName="Revit.Application.Document" resolvedName="Revit.Application.Document" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="4ea74089-230a-4a8c-8782-2a73663145da" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1409.00774412013" y="210.512016027149" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="DWFMarkup" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="5b9444d4-8bee-49c9-a808-560f2b329f27" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1217.80774412013" y="247.938682693816" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x[0];&#xA;x[1];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <PythonNodeModels.PythonNode guid="6bceaf46-5c26-47f5-a15f-8688c333a0d9" type="PythonNodeModels.PythonNode" nickname="Python Script" x="993.40774412013" y="243.725349360483" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
# Import RevitAPI Classes
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB.Structure import StructuralType

# Import DocumentManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)
#Import Collections
from System.Collections.Generic import List
import System

doc = DocumentManager.Instance.CurrentDBDocument
activeView = UnwrapElement(IN[0])

filters = List[ElementFilter]()
pvp = ParameterValueProvider(ElementId(BuiltInParameter.IMPORT_SYMBOL_NAME))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Markup Object Rec",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Markup Object Li",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Markup Object Polyli",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Markup Object Ell",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"nuage",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"cloud",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"a main",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"hand",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Cote",False),True))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Dimension",False),True))
orFilter = LogicalAndFilter(filters)

def convert(box):
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan:
		centr = (box.Min+box.Max)/2
		coor = VC + XYZ((centr-BC).X * scale, (centr-BC).Y * scale, 0 )
	elif view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		centr = XYZ(box.Min.X,box.Min.Y,0)
		if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
			coor = VC + XYZ((centr-BC).X * scale, 0, (centr-BC).Y * scale)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
			coor = VC + XYZ((-centr+BC).X * scale, 0, (centr-BC).Y * scale)
		elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
			coor = VC + XYZ(0,(BC-centr).X * scale, (centr-BC).Y * scale)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
			coor = VC + XYZ(0,(centr-BC).X * scale, (centr-BC).Y * scale)
	return coor
	
TransactionManager.Instance.EnsureInTransaction(doc)
viewports=[doc.GetElement(vip) for vip in activeView.GetAllViewports()]	
for vp in viewports:
	view=doc.GetElement(vp.ViewId)
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan or view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		scale=vp.get_Parameter(BuiltInParameter.VIEW_SCALE).AsInteger()
		trans1 = SubTransaction(doc)
		trans1.Start()
		try:
			view.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION).Set(1)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Sections),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_CLines),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Grids),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Levels),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Callouts),True)
		except: pass
		BC = vp.GetBoxCenter()
		if view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
			viewCenter= (view.CropBox.Min + view.CropBox.Max)/2
			origin = view.CropBox.Transform.Origin
			if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
				VC = origin + XYZ(viewCenter.X,0,viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
				VC = origin + XYZ(-viewCenter.X,0,viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
				VC = origin + XYZ(0,-viewCenter.X, viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
				VC = origin + XYZ(0,viewCenter.X,viewCenter.Y)
		else:
			VC = (view.CropBox.Min + view.CropBox.Max)/2
		trans1.RollBack()

dwfMarkups = FilteredElementCollector(doc, activeView.Id).OfClass(ImportInstance).WhereElementIsNotElementType().WherePasses(orFilter).ToElements()

types = FilteredElementCollector(doc).OfClass(FamilySymbol).ToElements()
instances,dwfs = [],[]
sT = StructuralType.NonStructural
for dwf in dwfMarkups:
	for famType in types:
		if famType.ToDSType(False).Name in dwf.Name or famType.FamilyName in dwf.Name:
			box=dwf.BoundingBox[activeView]
			dwfs.append(dwf)
			placement=famType.Family.FamilyPlacementType 
			if not famType.IsActive : famType.Activate()
			if placement == FamilyPlacementType.ViewBased :
				instances.append(doc.Create.NewFamilyInstance(convert(box), famType, view).ToDSType(False))
			elif placement == FamilyPlacementType.OneLevelBased :
				instance = doc.Create.NewFamilyInstance(convert(box),famType,view.GenLevel,sT)
				instances.append(instance.ToDSType(False))
				if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan :
					instance.get_Parameter(BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM).Set(0)
			else : instances = None
TransactionManager.Instance.TransactionTaskDone()

OUT = dwfs, instances</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="865ae937-5195-4567-8815-cce9a058df9a" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="359.80774412013" y="243.725349360483" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="sheet:var[]..[]=Revit.Application.Document.Current.ActiveView" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="d4899524-0729-4a53-8517-53522da99f32" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1409.00774412013" y="294.512016027149" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="FamilyInstance" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="5b9444d4-8bee-49c9-a808-560f2b329f27" start_index="0" end="4ea74089-230a-4a8c-8782-2a73663145da" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5b9444d4-8bee-49c9-a808-560f2b329f27" start_index="1" end="d4899524-0729-4a53-8517-53522da99f32" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6bceaf46-5c26-47f5-a15f-8688c333a0d9" start_index="0" end="5b9444d4-8bee-49c9-a808-560f2b329f27" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="865ae937-5195-4567-8815-cce9a058df9a" start_index="0" end="6bceaf46-5c26-47f5-a15f-8688c333a0d9" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>