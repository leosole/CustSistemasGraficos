<Workspace Version="1.3.4.6666" X="-405.167940583383" Y="14.7793318641987" zoom="0.712594832628489" ScaleFactor="1" Name="Copy DWFMarkup Curve to View" Description="Copies the line, polyline and ellipse from the Markup objects for the given or active sheet.&#xD;&#xA;Please note that markups are found by name (label) and therefore depend on the Revit localization (language)." ID="45095b70-5c82-4353-bba2-e78a525784b4" Category="GeniusLoci.DWF">
  <NamespaceResolutionMap>
    <ClassMap partialName="Revit.Application.Document.Current" resolvedName="Revit.Application.Document" assemblyName="RevitNodes.dll" />
    <ClassMap partialName="Revit.Application.Document" resolvedName="Revit.Application.Document" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="4cf81eb3-fcc0-439d-a91d-f66583d06dca" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="232.4" y="197.6" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="sheet:var[]..[]=Revit.Application.Document.Current.ActiveView" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <PythonNodeModels.PythonNode guid="0872af0d-958c-4417-9664-d5309a094de7" type="PythonNodeModels.PythonNode" nickname="Python Script" x="801.814579625782" y="199.147296078171" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
# Import RevitAPI Classes
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

# Import DocumentManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)
#Import Collections
from System.Collections.Generic import List
import System

import math

doc = DocumentManager.Instance.CurrentDBDocument
activeView = UnwrapElement(IN[0])

filters = List[ElementFilter]()
pvp = ParameterValueProvider(ElementId(BuiltInParameter.IMPORT_SYMBOL_NAME))

filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Rectangle",False)))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Markup Object Li",False)))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Markup Object Polyli",False)))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Ellipse",False)))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Ligne",False)))
filters.Add(ElementParameterFilter(FilterStringRule(pvp, FilterStringContains(),"Polyligne",False)))
orFilter = LogicalOrFilter(filters)

dwfMarkups = FilteredElementCollector(doc, activeView.Id).OfClass(ImportInstance).WhereElementIsNotElementType().WherePasses(orFilter).ToElements()

def pairwise(iterable, step=2):
#	Iterate through items in pairs.
	if step == 1:
		from itertools import tee, izip
		a, b = tee(iterable)
		next(b, None)
		return izip(a, b)
	elif step == 2:
		a = iter(iterable)
		return zip(a, a)

def convert(coor):
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan:
		conv=[VC + XYZ((coor-BC).X * scale, (coor-BC).Y * scale, 0) for coor in coordinates]
	elif view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
			conv=[VC + XYZ((coor-BC).X * scale, 0, (coor-BC).Y * scale) for coor in coordinates]
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
			conv=[VC + XYZ((BC-coor).X * scale, 0, (coor-BC).Y * scale) for coor in coordinates]
		elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
			conv=[VC + XYZ(0,(BC-coor).X * scale,(coor-BC).Y * scale) for coor in coordinates]
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
			conv=[VC + XYZ(0,(coor-BC).X * scale,(coor-BC).Y * scale) for coor in coordinates]
	return conv

def ellips(symbIns):
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan:
		ellipse=Ellipse.CreateCurve(VC+(symbIns.Center-BC)* scale,symbIns.RadiusX* scale,symbIns.RadiusY* scale,symbIns.XDirection,symbIns.YDirection,0,2*math.pi)
	elif view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
			ellipse=Ellipse.CreateCurve(VC + XYZ((symbIns.Center-BC).X * scale, 0, (symbIns.Center-BC).Y * scale),symbIns.RadiusX* scale,symbIns.RadiusY* scale,symbIns.XDirection, XYZ.BasisZ,0,2*math.pi)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
			ellipse=Ellipse.CreateCurve(VC + XYZ((-symbIns.Center+BC).X * scale, 0, (symbIns.Center-BC).Y * scale),symbIns.RadiusX* scale,symbIns.RadiusY* scale,symbIns.XDirection,XYZ.BasisZ,0,2*math.pi)
		elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
			ellipse=Ellipse.CreateCurve(VC + XYZ(0,(BC-symbIns.Center).X * scale, (symbIns.Center-BC).Y * scale),symbIns.RadiusX* scale,symbIns.RadiusY* scale, symbIns.YDirection, XYZ.BasisZ, 0,2*math.pi)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
			ellipse=Ellipse.CreateCurve(VC + XYZ(0,(symbIns.Center-BC).X * scale,(symbIns.Center-BC).Y * scale),symbIns.RadiusX* scale,symbIns.RadiusY* scale,symbIns.YDirection,XYZ.BasisZ,0,2*math.pi)
	return ellipse

def arc(symbIns):
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan:
		circle=Ellipse.CreateCurve(VC+(symbIns.Center-BC)* scale,symbIns.Radius * scale,symbIns.Radius* scale, symbIns.XDirection, symbIns.YDirection,0,2*math.pi)
	elif view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
			circle=Ellipse.CreateCurve(VC + XYZ((symbIns.Center-BC).X * scale, 0, (symbIns.Center-BC).Y * scale),symbIns.Radius* scale,symbIns.Radius* scale,symbIns.XDirection, XYZ.BasisZ,0,2*math.pi)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
			circle=Ellipse.CreateCurve(VC + XYZ((-symbIns.Center+BC).X * scale, 0, (symbIns.Center-BC).Y * scale),symbIns.Radius* scale,symbIns.Radius* scale,symbIns.XDirection,XYZ.BasisZ,0,2*math.pi)
		elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
			circle=Ellipse.CreateCurve(VC + XYZ(0,(BC-symbIns.Center).X * scale, (symbIns.Center-BC).Y * scale),symbIns.Radius* scale,symbIns.Radius* scale, symbIns.YDirection, XYZ.BasisZ, 0,2*math.pi)
		elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
			circle=Ellipse.CreateCurve(VC + XYZ(0,(symbIns.Center-BC).X * scale,(symbIns.Center-BC).Y * scale),symbIns.Radius* scale,symbIns.Radius* scale,symbIns.YDirection,XYZ.BasisZ,0,2*math.pi)
	return circle

TransactionManager.Instance.EnsureInTransaction(doc)
viewports=[doc.GetElement(vip) for vip in activeView.GetAllViewports()]	
for vp in viewports:
	view=doc.GetElement(vp.ViewId)
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan or view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		scale=vp.get_Parameter(BuiltInParameter.VIEW_SCALE).AsInteger()
		trans1 = SubTransaction(doc)
		trans1.Start()
		try:
			view.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION).Set(1)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Sections),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_CLines),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Grids),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Levels),True)
			view.SetCategoryHidden(ElementId(BuiltInCategory.OST_Callouts),True)
		except: pass
		BC = vp.GetBoxCenter()
		if view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
			viewCenter = (view.CropBox.Min + view.CropBox.Max)/2
			origin = view.CropBox.Transform.Origin
			if view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisY):
				VC = origin + XYZ(viewCenter.X,0,viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisY):
				VC = origin + XYZ(-viewCenter.X,0,viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(-XYZ.BasisX):
				VC = origin + XYZ(0,-viewCenter.X, viewCenter.Y)
			elif view.ViewDirection.IsAlmostEqualTo(XYZ.BasisX):
				VC = origin + XYZ(0,viewCenter.X,viewCenter.Y)
		else:
			VC = (view.CropBox.Min + view.CropBox.Max)/2
		trans1.RollBack()

lineList,elementlist=[],[]
for dwf in dwfMarkups :
	geoEle=dwf.get_Geometry(Options())
	if geoEle != None:
		for geoInstance in geoEle:
			if isinstance(geoInstance, GeometryInstance):
				for symbIns in geoInstance.GetInstanceGeometry():
					if isinstance(symbIns, Ellipse):
						lines,curvelist=[],[]
						ellipse=ellips(symbIns)
						try:
							curvelist.append(doc.Create.NewDetailCurve(view, ellipse))
						except:
							curvelist.append(None)
						lines.append(ellipse.ToProtoType())
					elif isinstance(symbIns, Arc):
						lines,curvelist=[],[]
						circle=arc(symbIns)
						try:
							curvelist.append(doc.Create.NewDetailCurve(view, circle))
						except:
							curvelist.append(None)
						lines.append(circle.ToProtoType())
					elif isinstance(symbIns, PolyLine) :
						lines,curvelist=[],[]
						coordinates=symbIns.GetCoordinates()
						#Convert DWF sheet coordinates into model coordinates
						conv=convert(coordinates)
						for xyz1, xyz2 in pairwise(conv, step=1):
							#Exception: Curve length is too small for Revit's tolerance (as identified by Application.ShortCurveTolerance).
							try: line=Line.CreateBound(xyz1, xyz2)
							except : pass
							try:
								curvelist.append(doc.Create.NewDetailCurve(view, line))
							except:
								curvelist.append(None)
							lines.append(line.ToProtoType())
		elementlist.append(curvelist)
		lineList.append(lines)
		TransactionManager.Instance.TransactionTaskDone()

OUT = dwfMarkups,elementlist,lineList</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="bc1d981d-e31f-467a-913b-6aa9f353a84e" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1147.21548824026" y="197.024032054299" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="DWFMarkup" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="e4a072cc-be96-4d66-8608-70166eb5107a" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="954.804238541881" y="200.649848623504" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x[0];&#xA;x[1];&#xA;x[2];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="d5103da7-373a-4d75-acf5-e6b4997c2599" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1146.45141022616" y="262.479128396323" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="//Revit Detail Line&#xD;&#xA;DetailCurve" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="6d50c7d9-836a-437a-9493-16ef4071eb3d" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1144.33795033212" y="350.665351232567" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="//Dynamo Geometry curve&#xD;&#xA;Curve" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="4cf81eb3-fcc0-439d-a91d-f66583d06dca" start_index="0" end="0872af0d-958c-4417-9664-d5309a094de7" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0872af0d-958c-4417-9664-d5309a094de7" start_index="0" end="e4a072cc-be96-4d66-8608-70166eb5107a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e4a072cc-be96-4d66-8608-70166eb5107a" start_index="0" end="bc1d981d-e31f-467a-913b-6aa9f353a84e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e4a072cc-be96-4d66-8608-70166eb5107a" start_index="1" end="d5103da7-373a-4d75-acf5-e6b4997c2599" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e4a072cc-be96-4d66-8608-70166eb5107a" start_index="2" end="6d50c7d9-836a-437a-9493-16ef4071eb3d" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>