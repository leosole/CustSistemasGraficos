<Workspace Version="1.3.4.6666" X="24.8288173568517" Y="181.908133896127" zoom="0.333164217389368" ScaleFactor="1" Name="Get Joined Elements" Description="Returns all elements joined to the given element." ID="8a41d7e6-40a2-4d28-81cd-55dbe94af4ef" Category="GeniusLoci.Element">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="91bfa41d-01ab-4855-ada3-0e3b8e79480b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="469.6" y="355.6" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Curve based element&#xD;&#xA;//Longest lacing for several elements&#xD;&#xA;element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="66cc17a2-fdb9-42ce-85e0-8bee89171603" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1042.4" y="366" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="9db6816d-aff7-4b2c-b899-c438e62b9883" type="PythonNodeModels.PythonNode" nickname="Python Script" x="856.8" y="360" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Alban de Chasteigner 2019
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)
clr.ImportExtensions(Revit.Elements)
from Revit.Elements import *

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
doc = DocumentManager.Instance.CurrentDBDocument

from itertools import chain

items = UnwrapElement(IN[0])
if not hasattr(items, '__iter__'):
	items = [items]
	
join,result = [],[]

for item in items:
	loc = item.Location
	for ip in range(0, 2):
		join.append(loc.ElementsAtJoin[ip])
		flatlist = list(chain.from_iterable(join))
	for wall in flatlist :
		if wall.Id != item.Id :
			result.append(wall)
	joined=JoinGeometryUtils.GetJoinedElements(doc,item)
	for join in joined:
		result.append(doc.GetElement(join))
OUT = result</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="91bfa41d-01ab-4855-ada3-0e3b8e79480b" start_index="0" end="9db6816d-aff7-4b2c-b899-c438e62b9883" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9db6816d-aff7-4b2c-b899-c438e62b9883" start_index="0" end="66cc17a2-fdb9-42ce-85e0-8bee89171603" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>