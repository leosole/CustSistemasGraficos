<Workspace Version="1.3.4.6666" X="-184" Y="-30.8" zoom="1" ScaleFactor="1" Name="View CropBox" Description="Obtain the CropBox, the SectionBox or the ElevationMarker element of the given view. &#xD;&#xA;Retrieve also the CropBox curves and the BoundingBox." ID="6a818e7b-87db-4c87-900a-e85655838b00" Category="GeniusLoci.View">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="833c2a8f-c40e-41bf-81d6-a837df279e97" type="PythonNodeModels.PythonNode" nickname="Python Script" x="479" y="406.426666666667" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Alban de Chasteigner 2021
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com
#https://github.com/albandechasteigner/GeniusLociForDynamo

import clr
import math
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *
clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Transactions import TransactionManager
clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.GeometryConversion)

views = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]

def GetCropBox(view):
	provider= ParameterValueProvider(ElementId(BuiltInParameter.ID_PARAM))
	rule = FilterElementIdRule(provider, FilterNumericEquals(), view.Id )
	filter= ElementParameterFilter(rule)
	return doc.GetElement(FilteredElementCollector(view.Document).WherePasses(filter).ToElementIds().Find(lambda x: x.IntegerValue != view.Id.IntegerValue))

elem,lines,box=[],[],[]

for view in views:
	doc=view.Document
	# CropBox or viewSection Marker
	if view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan or view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :
		elem.append(GetCropBox(view))
		shape=view.GetCropRegionShapeManager().GetCropShape()
		if len(shape) &gt; 0:
			lines.append([s.ToProtoType() for s in shape[0]])
		else:lines.append(None)
		box.append(view.CropBox.ToProtoType())

	# SectionBox
	elif view.ViewType == ViewType.ThreeD:
		elem.append(doc.GetElement(ElementId(view.Id.IntegerValue - 1)))
		lines.append(None)
		box.append(view.GetSectionBox().ToProtoType())

if isinstance(IN[0], list): OUT = elem, lines, box
else: OUT = elem[0], lines[0], box[0]</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ca6da310-2e2d-4095-8f00-c36791a8b448" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="315.4" y="406.426666666667" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="view" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="10cc4f42-db71-450e-b3d1-8e27126b220e" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="703.4" y="410.64" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x[0];&#xA;x[1];&#xA;x[2];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="0f5d0a79-ffea-4284-9ee1-d3a79e4d5ab3" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="894.6" y="331" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="//CropBox, SectionBox or ElevationMarker&#xD;&#xA;Element" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="e703fb68-d7b3-4850-97ea-9d8a9a146579" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="894.6" y="424" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="//CropBox curves&#xD;&#xA;Curves" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="d14abd37-8ba7-4779-a2d7-231c98281484" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="894.6" y="517" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="//CropBox or SectionBox BoundingBox&#xD;&#xA;BoundingBox" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="833c2a8f-c40e-41bf-81d6-a837df279e97" start_index="0" end="10cc4f42-db71-450e-b3d1-8e27126b220e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ca6da310-2e2d-4095-8f00-c36791a8b448" start_index="0" end="833c2a8f-c40e-41bf-81d6-a837df279e97" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="10cc4f42-db71-450e-b3d1-8e27126b220e" start_index="0" end="0f5d0a79-ffea-4284-9ee1-d3a79e4d5ab3" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="10cc4f42-db71-450e-b3d1-8e27126b220e" start_index="1" end="e703fb68-d7b3-4850-97ea-9d8a9a146579" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="10cc4f42-db71-450e-b3d1-8e27126b220e" start_index="2" end="d14abd37-8ba7-4779-a2d7-231c98281484" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-52.6270980834961" eyeY="17.5444450378418" eyeZ="41.425724029541" lookX="51.3084678649902" lookY="-17.5444450378418" lookZ="-40.8281440734863" upX="0.0354962088167667" upY="0.998970568180084" upZ="-0.0282457154244184" />
  </Cameras>
</Workspace>