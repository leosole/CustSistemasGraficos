<Workspace Version="1.3.4.6666" X="-441.579441836977" Y="162.898063169993" zoom="1.02988563947099" ScaleFactor="1" Name="Elements From Linked File in Space" Description="This node will check what elements from a linked model are inside of any of the spaces in the current model.&#xD;&#xA;Based on an archilab node" ID="d1f06bbe-3b61-47be-a2ba-aa1e161dc9bb" Category="GeniusLoci.Room">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="5c74618a-f006-4aaa-96db-8e06c5eb80a7" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="527.147926868293" y="66.370477307247" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="2f48464f-4f4b-45e3-b973-236ee63f75d4" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="527.147926868293" y="149.370477307247" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Spaces" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="05c60544-520d-468c-b285-f39d34f6ae80" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="981.547926868293" y="123.370477307247" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="a191a911-58bb-4737-b0c0-37cfcf5a6fde" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="527.147926868293" y="232.370477307247" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="LinkInstance" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <PythonNodeModels.PythonNode guid="d3c39c2c-3e52-41eb-ad50-0f03470723d9" type="PythonNodeModels.PythonNode" nickname="Python Script" x="738.702835227182" y="105.935972547446" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>#Copyright(c) 2015, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

# This code is based on Family.InRoom node originally created
# by Peter Kompolschek and published on Dynamo blog. Big thanks 
# to Peter for sharing his work so graciously.

import clr
import sys
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

rvtLink = UnwrapElement(IN[2])
transform = rvtLink.GetTotalTransform()

def TryGetSpace(family, phase):
	try:
		inSpace = family.Space[phase]
	except:
		inSpace = None
		pass
	return inSpace

def FamiliesInSpace(_space, _families, _transform, _doc):
	outList = []
	for family in _families:
		location = family.Location
		if type(location) == LocationPoint:
			pt = _transform.OfPoint(location.Point)
		else:
			pt = _transform.OfPoint(location.Curve.Evaluate(0.5, True))
		if _space.IsPointInSpace(pt):
			outList.append(family)
		else:
			for phase in _doc.Phases:
				inSpace = TryGetSpace(family, phase)
				if inSpace != None and inSpace.ToDSType(True).Name == _space.ToDSType(True).Name:
					outList.append(family)
	return outList

try:
	errorReport = None
	families = []
	for i in IN[0]:
		families.append(UnwrapElement(i))
	
	spaces = []
	for i in IN[1]:
		if UnwrapElement(i).Area &gt; 0:
			spaces.append(UnwrapElement(i))
	
	outData = [[] for i in range(len(spaces))]
	for index, space in enumerate(spaces):
		outData[index].extend(FamiliesInSpace(space, families, transform, doc))
except:
	# if error accurs anywhere in the process catch it
	import traceback
	errorReport = traceback.format_exc()

#Assign your output to the OUT variable
if errorReport == None:
	OUT = outData
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="5c74618a-f006-4aaa-96db-8e06c5eb80a7" start_index="0" end="d3c39c2c-3e52-41eb-ad50-0f03470723d9" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2f48464f-4f4b-45e3-b973-236ee63f75d4" start_index="0" end="d3c39c2c-3e52-41eb-ad50-0f03470723d9" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a191a911-58bb-4737-b0c0-37cfcf5a6fde" start_index="0" end="d3c39c2c-3e52-41eb-ad50-0f03470723d9" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d3c39c2c-3e52-41eb-ad50-0f03470723d9" start_index="0" end="05c60544-520d-468c-b285-f39d34f6ae80" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>