<Workspace Version="1.3.4.6666" X="0" Y="0" zoom="1" ScaleFactor="1" Name="Element LocationCurve" Description="Gets the curve geometry from the element." ID="d2b0540c-a53c-4f36-a813-45dc77c6be37" Category="GeniusLoci.Geometry">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="1a13a8ea-0f2b-4af9-9c00-0be1d33acdec" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="122" y="218" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="2dcf4f79-cd44-4b58-bf71-24ee1d0e81dd" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="534.8" y="218" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Curve" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="8efed4d7-4cdf-4394-8746-41756d7659ed" type="PythonNodeModels.PythonNode" nickname="Python Script" x="310.8" y="218.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application
version=int(app.VersionNumber)

items = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]
curves = []

def Curve(dimension):
	curve = []
	if dimension.DimensionShape == DimensionShape.Linear:
		direction = dimension.Curve.Direction
		if dimension.NumberOfSegments ==0:
			start = dimension.Origin.Subtract(direction.Multiply(dimension.Value/2))
			end = dimension.Origin.Subtract(direction.Multiply(-dimension.Value/2))
			curve=Line.CreateBound(start,end).ToProtoType()
		else:
			for segment in dimension.Segments:
				start = segment.Origin.Subtract(direction.Multiply(segment.Value/2))
				end = segment.Origin.Subtract(direction.Multiply(-segment.Value/2))
				curve.append(Line.CreateBound(start,end).ToProtoType())
	return curve
	
def getCurve(section):
	#Thanks to Fair59 https://forums.autodesk.com/t5/revit-api-forum/how-can-i-get-the-coordinates-of-the-endpoints-for-a-section/td-p/6877871
	correction = 21.130014403 / 304.8
	#Get the section view from the Section Marker
	if ElementId(BuiltInCategory.OST_Viewers) == section.Category.Id :
		viewSection = doc.GetElement(ElementId(section.Id.IntegerValue + 1))
		marker=section
	#Get the Section Marker from the section view
	elif isinstance(section,Autodesk.Revit.DB.ViewSection):
		marker = doc.GetElement(ElementId(section.Id.IntegerValue - 1))
		viewSection=section

	if marker and viewSection:
		vType = doc.GetElement(marker.GetTypeId())
		if vType:
			TransactionManager.Instance.EnsureInTransaction(doc)
			trans = Autodesk.Revit.DB.SubTransaction(doc)
			trans.Start()
			par = vType.get_Parameter(BuiltInParameter.SECTION_TAG)
			par.Set( ElementId.InvalidElementId)
			par = vType.get_Parameter(BuiltInParameter.VIEWER_REFERENCE_LABEL_TEXT)
			par.Set("")
			view.Scale = 1
			doc.Regenerate()
			bb1 = marker.get_BoundingBox(view)
			trans.RollBack()
			TransactionManager.Instance.ForceCloseTransaction()

			bb = marker.get_BoundingBox(view)
			if bb:
				pt1 = bb.Min
				pt2 = bb.Max
				if bb1 :
					pt1 = bb1.Min
					pt2 = bb1.Max
	
				Origin = viewSection.Origin
				ViewBasisX = viewSection.RightDirection
				ViewBasisY = viewSection.ViewDirection
				if ViewBasisX.X &lt; 0 != ViewBasisX.Y &lt; 0 :
					d = pt1.Y
					pt1 = XYZ( pt1.X, pt2.Y, pt1.Z)
					pt2 = XYZ( pt2.X, d, pt2.Z)

				ToPlane1 = pt1.Add(ViewBasisY.Multiply(ViewBasisY.DotProduct(Origin.Subtract(pt1))))
				ToPlane2 = pt2.Subtract(ViewBasisY.Multiply(ViewBasisY.DotProduct(pt2.Subtract(Origin))))
				correctionVector = ToPlane2.Subtract( ToPlane1 ).Normalize().Multiply(correction)
				endPoint0 = ToPlane1.Add(correctionVector)
				endPoint1 = ToPlane2.Subtract(correctionVector)
				curve=Line.CreateBound(endPoint0,endPoint1).ToProtoType()
				return curve

def colCurve(col):	
	loc= col.Location.Point
	bb = col.get_BoundingBox(None).Min
	height=col.get_Parameter(BuiltInParameter.INSTANCE_LENGTH_PARAM).AsDouble()
	start=XYZ(loc.X,loc.Y,bb.Z)
	end=XYZ(start.X,start.Y,start.Z+height)
	curve=Line.CreateBound(start,end).ToProtoType()
	return curve

for item in items:
	doc=item.Document
	view = doc.ActiveView
	#Railing
	if hasattr(item, "GetPath"):
		curves.append([railpath.ToProtoType() for railpath in item.GetPath()])
	#Revision Cloud
	elif hasattr(item, "GetSketchCurves"): 
		curves.append([sk.ToProtoType() for sk in item.GetSketchCurves()])
	elif hasattr(item, "LocationCurve"): 
		curves.append(item.LocationCurve.ToProtoType())
	elif hasattr(item, "FullCurve"): 
		curves.append(item.FullCurve.ToProtoType())
	elif hasattr(item, "ValueOverride"):
		curves.append(Curve(item))
	elif hasattr(item, "Curve"): 
		curves.append(item.Curve.ToProtoType())
	elif hasattr(item, "GeometryCurve"): 		
		curves.append(item.GeometryCurve.ToProtoType())
	elif hasattr(item, "GetEndpoint"): 
		curves.append(item.ToProtoType())
	elif version &gt; 2019 and isinstance(item,Autodesk.Revit.DB.Analysis.PathOfTravel):
		curves.append([i.ToProtoType() for i in item.GetCurves()])
	elif ElementId(BuiltInCategory.OST_StructuralColumns) == item.Category.Id and not item.IsSlantedColumn :
		curves.append(colCurve(item))
	elif hasattr(item, "GetCurvesInView"):
		for crv in item.GetCurvesInView(DatumExtentType.ViewSpecific,view):
			curves.append(crv.ToProtoType())
	elif ElementId(BuiltInCategory.OST_Viewers) == item.Category.Id or isinstance(item,Autodesk.Revit.DB.ViewSection):
		curves.append(getCurve(item))
	elif hasattr(item, "Location"):
		loc = item.Location
		if isinstance(loc,Autodesk.Revit.DB.LocationCurve):
			curves.append(loc.Curve.ToProtoType())
		else:
			curves.append(None)
	else: curves.append(None)

if isinstance(IN[0], (list)): OUT = curves
elif hasattr(item, "GetPath"): OUT = curves
elif hasattr(item, "ValueOverride"): OUT = curves
else: OUT = curves[0]</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="1a13a8ea-0f2b-4af9-9c00-0be1d33acdec" start_index="0" end="8efed4d7-4cdf-4394-8746-41756d7659ed" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="8efed4d7-4cdf-4394-8746-41756d7659ed" start_index="0" end="2dcf4f79-cd44-4b58-bf71-24ee1d0e81dd" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>