<Workspace Version="1.3.4.6666" X="191.867634957944" Y="57.8223765100483" zoom="1.10476425630303" ScaleFactor="1" Name="Align Pattern To Edges" Description="Aligns the lines of the surface (model) pattern with the bottom and right edges. &#xD;&#xA;The element can be a roof, a floor, a ceiling or a wall." ID="119e5685-194e-49ac-90fb-a13f58a0009f" Category="GeniusLoci.Material">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="4dcfe2b2-500b-4f45-9684-334c4e30d97b" type="PythonNodeModels.PythonNode" nickname="Python Script" x="277.2" y="251.2" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Inspired by Fair59 https://forums.autodesk.com/t5/revit-api-forum/use-of-align-function-programatically-to-change-the-alignment-of/td-p/6008184
#Suggestion by Mark Ackerley

#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *
#import System
#from System import Guid

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

elements = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]

for item in elements:
	if item.ToString() == 'Autodesk.Revit.DB.Floor' or item.ToString() == 'Autodesk.Revit.DB.Roof' or item.ToString() == 'Autodesk.Revit.DB.FootPrintRoof':
		ext = HostObjectUtils.GetTopFaces(item)
		end=0
	elif item.ToString() == 'Autodesk.Revit.DB.Wall':
		#get the external face reference of the item as an array
		ext = HostObjectUtils.GetSideFaces(item,ShellLayerType.Exterior)
		end=1
	else :
		ext = HostObjectUtils.GetBottomFaces(item)
		end=1
	#for (the array containing) the external face reference, get it's geometry
	for e in ext:
		extFace = item.GetGeometryObjectFromReference(e)
		#get the external face surface edges as lines, get the first line (the bottom)
		for	cv in extFace.GetEdgesAsCurveLoops()[0]:
			#get the finish point of the line
			corner = cv.GetEndPoint(end)
		#Check for model surfacepattern
		mat=doc.GetElement(extFace.MaterialElementId)
		patternType = doc.GetElement(mat.SurfacePatternId)
		pattern = patternType.GetFillPattern()
		#Get number of gridLines in pattern                
		gridCount = pattern.GridCount
		#Construct StableRepresentation to top face reference
		StableRef = e.ConvertToStableRepresentation(doc)
		
		#we want horizontal and vertical refs so we want 2 arrays
		for hatchindex in range(0, gridCount):
			refAr = ReferenceArray()
			ip=0
			while ip&lt;2:
				#generate an index for each hatch reference
				index = (hatchindex+1) + (ip * gridCount *2)
				#create a string for each hatch reference using the face reference and hatch index
				StableHatchString = StableRef + str.Format("/{0}", index)
				#generate a new reference for each hatch reference using the string
				HatchRef = Reference.ParseFromStableRepresentation(doc, StableHatchString)
				refAr.Append(HatchRef)
				ip += 1

			TransactionManager.Instance.EnsureInTransaction(doc)
			#create dimension to use it's references and length
			#this uses 2 references to the hatch pattern for each orientation
			_dimension = doc.Create.NewDimension(doc.ActiveView, Line.CreateBound(XYZ.Zero, XYZ(10, 0, 0)), refAr)
			ElementTransformUtils.MoveElement(doc, _dimension.Id, XYZ(.1, 0, 0))
			r1 = _dimension.References.get_Item(0)
			direction =_dimension.Curve.Direction
			hatchDirection = direction.CrossProduct(extFace.FaceNormal).Normalize()
			#move back by half because origin is always centered on the dimension
			origin = _dimension.Origin.Subtract(direction.Multiply(_dimension.Value/2))
			#create reference plane at the pattern location
			pl = doc.Create.NewReferencePlane(origin.Add(hatchDirection.Multiply(3)),origin,extFace.FaceNormal.Multiply(3),doc.ActiveView)
			#generate a unique name for the reference plane using it's Guid
			#pl.Name = str.Format("{0}_{1}","ref", Guid.NewGuid())
			TransactionManager.Instance.TransactionTaskDone()

			stableRef = str.Format("{0}:0:{1}",pl.UniqueId,"SURFACE")
			ref2Plane = Reference.ParseFromStableRepresentation(doc,stableRef)
	
			TransactionManager.Instance.ForceCloseTransaction()
			TransactionManager.Instance.EnsureInTransaction(doc)
			doc.Create.NewAlignment(doc.ActiveView,ref2Plane,r1)
			translation = origin.Subtract(corner)
			ElementTransformUtils.MoveElement(doc,pl.Id,-translation)
			
			#we don't need the dimensions or reference planes any more
			doc.Delete(_dimension.Id)
			doc.Delete(pl.Id)
			TransactionManager.Instance.TransactionTaskDone()

OUT="Success"</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ffc2c8dd-e274-41cd-b4b3-225a4c14b81b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-91.2" y="245.2" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Roof, floor, ceiling or wall&#xD;&#xA;element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="c0cf4dac-3e07-4aa1-a331-72220e7f26eb" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="473.6" y="254.4" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Result" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="4dcfe2b2-500b-4f45-9684-334c4e30d97b" start_index="0" end="c0cf4dac-3e07-4aa1-a331-72220e7f26eb" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ffc2c8dd-e274-41cd-b4b3-225a4c14b81b" start_index="0" end="4dcfe2b2-500b-4f45-9684-334c4e30d97b" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>