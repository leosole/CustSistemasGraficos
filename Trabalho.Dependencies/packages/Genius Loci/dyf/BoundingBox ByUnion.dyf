<Workspace Version="1.3.4.6666" X="59.5169041753987" Y="65.1645963731534" zoom="0.538046297688568" ScaleFactor="1" Name="BoundingBox ByUnion" Description="Creates a single bounding box for one or more elements and returns a solid.&#xD;&#xA;The optional input Rotation allows to be not aligned with the axis.&#xD;&#xA;By Vsevolod Chugreev" ID="b36597e1-1bf1-4ef3-baeb-d2453905b9e9" Category="GeniusLoci.Geometry">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="efc75870-dc5f-413f-b58b-36e959f03be8" type="PythonNodeModels.PythonNode" nickname="Python Script" x="408.553721559047" y="388.629373529811" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>#Main part of the script by Vsevolod Chugreev
#https://twitter.com/vschugr/status/1260581659214258176
import clr
clr.AddReference('ProtoGeometry') 
import Autodesk.DesignScript.Geometry as DG

clr.AddReference("RevitNodes")
import Revit 
clr.ImportExtensions(Revit.GeometryConversion) 

clr.AddReference('RevitAPI') 
from Autodesk.Revit.DB import *

clr.AddReference('RevitServices')
import RevitServices 
from RevitServices.Persistence import DocumentManager
doc = DocumentManager.Instance.CurrentDBDocument

import math

UIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits

def flatten(x):
    result = []
    for el in x:
        if hasattr(el, "__iter__") and not isinstance(el, basestring):
            result.extend(flatten(el))
        else:
            result.append(el)
    return result

def RotatedBox(elements,angle):
	def SumBoxes(boxes):
		minx = min([b.Min.X for b in boxes])
		miny = min([b.Min.Y for b in boxes])
		minz = min([b.Min.Z for b in boxes])
		maxx = max([b.Max.X for b in boxes])
		maxy = max([b.Max.Y for b in boxes])
		maxz = max([b.Max.Z for b in boxes])
		
		bb = BoundingBoxXYZ()
		bb.Min = XYZ(minx,miny,minz)
		bb.Max = XYZ(maxx,maxy,maxz)
		return bb

	def GeoBox(g):
		box = g.GetBoundingBox()
		origin = box.Transform.Origin
		box.Min = box.Min.Add(origin)
		box.Max = box.Max.Add(origin)
		return box

	boxes = []
	opt = Options()
	opt.DetailLevel = ViewDetailLevel.Fine
	
	solids,boxes = [],[]
	for element in elements:
		instGeo = element.get_Geometry(opt)
		for ig in instGeo:
			if isinstance(ig,Solid):
				box = GeoBox(ig)
				boxes.append(box)
				solids.append(ig)
			else:			
				geo = flatten(ig.GetInstanceGeometry())
				for g in geo:
					if isinstance(g,Solid):
						box = g.GetBoundingBox()
						if box.Max.X &lt; 99999:					
							box = GeoBox(g)
							boxes.append(box)
							solids.append(g)
					
	sumBox = SumBoxes(boxes)
	center = box.Max.Add(box.Min).Multiply(0.5)
	
	rotatedBoxes = []
	for i in range(len(boxes)):
		t = Transform.CreateRotationAtPoint(XYZ.BasisZ,-angle,center)
		g = SolidUtils.CreateTransformed(solids[i],t)
		rotatedBoxes.append(GeoBox(g))
					
	sumBox = SumBoxes(rotatedBoxes)
	minp = sumBox.Min
	maxp = sumBox.Max
	h = UnitUtils.ConvertFromInternalUnits(maxp.Z-minp.Z,UIunit)
	
	p1 = minp
	p3 = XYZ(maxp.X,maxp.Y,minp.Z)
	p2 = XYZ(minp.X,maxp.Y,minp.Z)
	p4 = XYZ(maxp.X,minp.Y,minp.Z)
	
	t2 = Transform.CreateRotationAtPoint(XYZ.BasisZ,angle,center)
	points = [t2.OfPoint(p).ToPoint() for p in [p1,p2,p3,p4]]
	poly = DG.PolyCurve.ByPoints(points,True)
	solid = poly.ExtrudeAsSolid(DG.Vector.ZAxis(),h)
	return solid
	
elements = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]
angle = math.radians((IN[1] if isinstance(IN[1],list) else [IN[1]])[0])

OUT =  RotatedBox(elements,angle)</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="4759123d-377a-449f-870a-1d7acd88639c" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="71.7537215590467" y="359.629373529811" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d1874776-c2fe-41b8-ac5e-c498da02fba0" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="71.7537215590467" y="443.629373529811" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="rotationAngle:var[]..[]=0" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="0ea5606f-87ac-4ce3-91fd-6706a852571f" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="633.353721559047" y="388.629373529811" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Solid" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="efc75870-dc5f-413f-b58b-36e959f03be8" start_index="0" end="0ea5606f-87ac-4ce3-91fd-6706a852571f" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="4759123d-377a-449f-870a-1d7acd88639c" start_index="0" end="efc75870-dc5f-413f-b58b-36e959f03be8" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d1874776-c2fe-41b8-ac5e-c498da02fba0" start_index="0" end="efc75870-dc5f-413f-b58b-36e959f03be8" end_index="1" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>