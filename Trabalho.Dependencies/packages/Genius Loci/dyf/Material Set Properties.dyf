<Workspace Version="1.3.4.6666" X="315.772824585646" Y="-66.6065656875076" zoom="0.490621106645781" ScaleFactor="1" Name="Material Set Properties" Description="Set the color, transparency, SurfaceForeground, SurfaceBackground, CutForeground and CutBackground patterns from the given material.&#xD;&#xA;Note : Prior to Revit 2019, the materials have only one surface pattern and one cut pattern.&#xD;&#xA;(All inputs are optional)" ID="42028bb7-f7bf-4856-aca4-88b3965451ae" Category="GeniusLoci.Material">
  <NamespaceResolutionMap>
    <ClassMap partialName="DSCore.Color" resolvedName="DSCore.Color" assemblyName="DSCoreNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <PythonNodeModels.PythonNode guid="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" type="PythonNodeModels.PythonNode" nickname="Python Script" x="189.232392731882" y="419.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="12">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <PortInfo index="4" default="False" />
      <PortInfo index="5" default="False" />
      <PortInfo index="6" default="False" />
      <PortInfo index="7" default="False" />
      <PortInfo index="8" default="False" />
      <PortInfo index="9" default="False" />
      <PortInfo index="10" default="False" />
      <PortInfo index="11" default="False" />
      <Script>#Alban de Chasteigner 2019
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

def tolist(obj1):
    if hasattr(obj1,"__iter__"): return obj1
    else: return [obj1]

def ConvertColor(e):
	return Autodesk.Revit.DB.Color(e.Red, e.Green, e.Blue)

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application
version=int(app.VersionNumber)

materials = tolist(UnwrapElement(IN[0]))
renders=tolist(IN[1])
shadingColors=tolist(IN[2])
transparencies=tolist(IN[3])
surfaceForegroundPatterns=tolist(UnwrapElement(IN[4]))
surfaceForegroundPatternColors=tolist(IN[5])
surfaceBackgroundPatterns=tolist(UnwrapElement(IN[6]))
surfaceBackgroundPatternColors=tolist(IN[7])
cutForegroundPatterns=tolist(UnwrapElement(IN[8]))
cutForegroundPatternColors=tolist(IN[9])
cutBackgroundPatterns=tolist(UnwrapElement(IN[10]))
cutBackgroundPatternColors=tolist(IN[11])

tar = FillPatternTarget.Drafting
fillPattern = FilteredElementCollector(doc).OfClass(Autodesk.Revit.DB.FillPatternElement)

# "Start" the transaction
TransactionManager.Instance.EnsureInTransaction(doc)
for material,render,shadingColor,transparency,surfaceForegroundPattern,surfaceForegroundPatternColor,surfaceBackgroundPattern, surfaceBackgroundPatternColor,cutForegroundPattern,cutForegroundPatternColor,cutBackgroundPattern,cutBackgroundPatternColor in zip(materials,renders,shadingColors,transparencies,surfaceForegroundPatterns,surfaceForegroundPatternColors,surfaceBackgroundPatterns,surfaceBackgroundPatternColors,cutForegroundPatterns,cutForegroundPatternColors,cutBackgroundPatterns,cutBackgroundPatternColors):
	if version &lt; 2019 :
		if render == None:
			pass
		else:
			material.UseRenderAppearanceForShading=render
		if shadingColor == None:
			pass
		else:
			material.Color = Color(shadingColor.Red, shadingColor.Green, shadingColor.Blue)
		if transparency == None:
			pass
		else:
			material.Transparency = transparency 
		if surfaceForegroundPattern == None:
			pass
		else:
			if surfaceForegroundPattern.GetType().ToString() == "System.String" :
				spId=[elem for elem in fillPattern if elem.Name.lower() == surfaceForegroundPattern.lower()][0].Id
				material.SurfacePatternId = spId
			else:
				material.SurfacePatternId = surfaceForegroundPattern.Id
		if surfaceForegroundPatternColor == None:
			pass
		else:
			material.SurfacePatternColor = Color(surfaceForegroundPatternColor.Red, surfaceForegroundPatternColor.Green, surfaceForegroundPatternColor.Blue)
		if surfaceBackgroundPattern == None:
			pass
		else:
			if surfaceBackgroundPattern.GetType().ToString() == "System.String" :
				material.SurfacePatternId = FillPatternElement.GetFillPatternElementByName(doc, FillPatternTarget.Drafting,surfaceBackgroundPattern).Id
			else:
				material.SurfacePatternId = surfaceBackgroundPattern.Id
		if surfaceBackgroundPatternColor == None:
			pass
		else:
			material.SurfacePatternColor = Color(surfaceBackgroundPatternColor.Red, surfaceBackgroundPatternColor.Green, surfaceBackgroundPatternColor.Blue)
		if cutForegroundPattern == None:
			pass
		else:
			if cutForegroundPattern.GetType().ToString() == "System.String" :
				material.CutPatternId = FillPatternElement.GetFillPatternElementByName(doc, FillPatternTarget.Drafting,cutForegroundPattern).Id
			else:
				material.CutPatternId = cutForegroundPattern.Id	
		if cutForegroundPatternColor == None:
			pass
		else:
			material.CutPatternColor = Color(cutForegroundPatternColor.Red, cutForegroundPatternColor.Green, cutForegroundPatternColor.Blue)
		if cutBackgroundPattern == None:
			pass
		else:
			if cutBackgroundPattern.GetType().ToString() == "System.String" :
				material.CutPatternId = FillPatternElement.GetFillPatternElementByName(doc, FillPatternTarget.Drafting,cutBackgroundPattern).Id
			else:
				material.CutPatternId = cutBackgroundPattern.Id
		if cutBackgroundPatternColor == None:
			pass
		else:
			material.CutPatternColor = Color(cutBackgroundPatternColor.Red, cutBackgroundPatternColor.Green, cutBackgroundPatternColor.Blue)

	else:
		if render == None:
			pass
		else:
			material.UseRenderAppearanceForShading=render
		if shadingColor == None:
			pass
		else:
			material.Color = Color(shadingColor.Red, shadingColor.Green, shadingColor.Blue)
		if transparency == None:
			pass
		else:
			material.Transparency = transparency 
		if surfaceForegroundPattern == None:
			pass
		else:
			if surfaceForegroundPattern.GetType().ToString() == "System.String" :
				spId=[elem for elem in fillPattern if elem.Name.lower() == surfaceForegroundPattern.lower()][0].Id
				material.SurfaceForegroundPatternId= spId
			else:		
				material.SurfaceForegroundPatternId = surfaceForegroundPattern.Id
		if surfaceForegroundPatternColor == None:
			pass
		else:
			material.SurfaceForegroundPatternColor = Color(surfaceForegroundPatternColor.Red, surfaceForegroundPatternColor.Green, surfaceForegroundPatternColor.Blue)
		if surfaceBackgroundPattern == None:
			pass
		else:
			if surfaceBackgroundPattern.GetType().ToString() == "System.String" :
				material.SurfaceBackgroundPatternId = FillPatternElement.GetFillPatternElementByName(doc, FillPatternTarget.Drafting,surfaceBackgroundPattern).Id
			else:
				material.SurfaceBackgroundPatternId = surfaceBackgroundPattern.Id
		if surfaceBackgroundPatternColor == None:
			pass
		else:
			material.SurfaceBackgroundPatternColor = Color(surfaceBackgroundPatternColor.Red, surfaceBackgroundPatternColor.Green, surfaceBackgroundPatternColor.Blue)
		if cutForegroundPattern == None:
			pass
		else:
			if cutForegroundPattern.GetType().ToString() == "System.String" :
				material.CutForegroundPatternId = FillPatternElement.GetFillPatternElementByName(doc, FillPatternTarget.Drafting,cutForegroundPattern).Id
			else:	
				material.CutForegroundPatternId = cutForegroundPattern.Id
		if cutForegroundPatternColor == None:
			pass
		else:
			material.CutForegroundPatternColor = Color(cutForegroundPatternColor.Red, cutForegroundPatternColor.Green, cutForegroundPatternColor.Blue)
		if cutBackgroundPattern == None:
			pass
		else:
			if cutBackgroundPattern.GetType().ToString() == "System.String" :
				material.CutBackgroundPatternId = FillPatternElement.GetFillPatternElementByName(doc, FillPatternTarget.Drafting,cutBackgroundPattern).Id
			else:
				material.CutBackgroundPatternId = cutBackgroundPattern.Id
		if cutBackgroundPatternColor == None:
			pass
		else:
			material.CutBackgroundPatternColor = Color(cutBackgroundPatternColor.Red, cutBackgroundPatternColor.Green, cutBackgroundPatternColor.Blue)
# "End" the transaction
TransactionManager.Instance.TransactionTaskDone()

if isinstance(IN[0], list): OUT = materials
else: OUT = materials[0]</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="33d66dc2-6380-4c39-a6d8-5c5e14d766e8" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="59.0027524503387" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="material:var" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="36b333e7-3ffb-41f9-8a0e-fa9cb468aab4" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="421.232392731882" y="419.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Material" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="050d234c-9757-4bc4-85e0-8fb1dd196dc7" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="142.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Boolean&#xD;&#xA;UseRenderAppearance:bool=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="89f90e11-e214-4d9c-aa5e-3daa48543fc4" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="235.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Dynamo Color&#xD;&#xA;color:DSCore.Color=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="a45246c2-bcd7-4abc-b775-4dbb3d5c7077" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="328.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Integer&#xD;&#xA;Transparency:int=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d4f07438-77fc-44fc-ab48-71155c2ca890" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="422.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Pattern as String or FillPatternElement&#xD;&#xA;SurfaceForegroundPattern:var=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f9055a18-4ad2-454d-9189-6c6a9f9e36f2" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="515.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Dynamo Color&#xD;&#xA;SurfaceForegroundPatternColor:DSCore.Color=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="2a95a4a4-92e8-44f8-b942-a9dfb6564c57" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="608.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Pattern (Drafting) as String or FillPatternElement&#xD;&#xA;SurfaceBackgroundPattern:var=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="678fcd77-df5a-4aa7-a413-c6b074928c5a" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="701.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Dynamo Color&#xD;&#xA;SurfaceBackgroundPatternColor:DSCore.Color=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="9420dffb-a59d-4e23-ad3b-ad53d30c12ce" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="794.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Pattern (Drafting) as String or FillPatternElement&#xD;&#xA;CutForegroundPattern:var=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f056aa4c-4f9c-464e-9ad8-2ae9707c1754" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="887.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Dynamo Color&#xD;&#xA;CutForegroundPatternColor:DSCore.Color=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="1c9ac570-24d8-4310-aabc-2ea88352ac54" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="980.002752450339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Pattern (Drafting) as String or FillPatternElement&#xD;&#xA;CutBackgroundPattern:var=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="51983ebd-fefc-4da2-917b-9f72c4904913" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-369.967607268118" y="1073.00275245034" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Dynamo Color&#xD;&#xA;CutBackgroundPatternColor:DSCore.Color=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" start_index="0" end="36b333e7-3ffb-41f9-8a0e-fa9cb468aab4" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="33d66dc2-6380-4c39-a6d8-5c5e14d766e8" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="050d234c-9757-4bc4-85e0-8fb1dd196dc7" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="89f90e11-e214-4d9c-aa5e-3daa48543fc4" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a45246c2-bcd7-4abc-b775-4dbb3d5c7077" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d4f07438-77fc-44fc-ab48-71155c2ca890" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="4" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f9055a18-4ad2-454d-9189-6c6a9f9e36f2" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="5" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2a95a4a4-92e8-44f8-b942-a9dfb6564c57" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="6" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="678fcd77-df5a-4aa7-a413-c6b074928c5a" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="7" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9420dffb-a59d-4e23-ad3b-ad53d30c12ce" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="8" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f056aa4c-4f9c-464e-9ad8-2ae9707c1754" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="9" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="1c9ac570-24d8-4310-aabc-2ea88352ac54" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="10" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="51983ebd-fefc-4da2-917b-9f72c4904913" start_index="0" end="a172283b-8a49-46ca-ae2f-0c6c33f25a9f" end_index="11" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>