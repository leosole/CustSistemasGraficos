<Workspace Version="1.3.4.6666" X="165.985360979371" Y="136.650722959526" zoom="0.642869557405948" ScaleFactor="1" Name="Split ByPoints" Description="Split linear elements by points (duct, pipe, column, beam and wall).&#xD;&#xA;As many elements as points are required.&#xD;&#xA;Works only in Revit 2017 and later." ID="ce32dc69-9896-458c-abba-bc0ba07ba752" Category="GeniusLoci.Geometry">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="1d4d0a3e-8a11-49fe-b1e4-c3e725b4ca4e" type="PythonNodeModels.PythonNode" nickname="Python Script" x="310.4" y="234.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>#Thanks to Maciek Glowka and Cyril Poupin on the Dynamo Forum

import clr
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.GeometryConversion)
doc = DocumentManager.Instance.CurrentDBDocument

elements = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]
points = IN[1] if isinstance(IN[1],list) else [IN[1]]
points = [p.ToXyz() for p in points]

parents,childs,fittings = [],[],[]
children = {}

def colCurve(col):	
	loc= col.Location.Point
	bb = col.get_BoundingBox(None).Min
	height=col.get_Parameter(BuiltInParameter.INSTANCE_LENGTH_PARAM).AsDouble()
	start=XYZ(loc.X,loc.Y,bb.Z)
	end=XYZ(start.X,start.Y,start.Z+height)
	curve=Line.CreateBound(start,end)
	return curve

def pointOnLine(p,a,b):
	if not (p-a).CrossProduct(b-a).IsAlmostEqualTo(XYZ.Zero):
		return False
	if a.X!=b.X:
		if a.X&lt;p.X&lt;b.X:
			return True
		if a.X&gt;p.X&gt;b.X:
			return True
	else:
		if a.Y&lt;p.Y&lt;b.Y:
			return True
		if a.Y&gt;p.Y&gt;b.Y:
			return True
	return False
	
def splitWall(ec,p):
	lc = ec.Location.Curve
	v0 = lc.GetEndPoint(0)
	v1 = lc.GetEndPoint(1)
	isOnLine=False
	if pointOnLine(p,v0,v1):
		isOnLine = True
	if isOnLine:
		join_1 = WallUtils.IsWallJoinAllowedAtEnd(ec, 1)
		WallUtils.DisallowWallJoinAtEnd(ec, 1)
		e1Id=ElementTransformUtils.CopyElement(doc, ec.Id, XYZ.Zero)[0]
		e1 = doc.GetElement(e1Id)
		WallUtils.DisallowWallJoinAtEnd(e1, 0)
		nc0 = Autodesk.Revit.DB.Line.CreateBound(v0, p)
		nc1 = Autodesk.Revit.DB.Line.CreateBound(v1, p)
		ec.Location.Curve = nc0
		e1.Location.Curve = nc1
		if join_1 :
			WallUtils.DisallowWallJoinAtEnd(e1, 0)
		WallUtils.AllowWallJoinAtEnd(ec, 1)
		WallUtils.AllowWallJoinAtEnd(e1, 0)
	return e1Id

TransactionManager.Instance.EnsureInTransaction(doc)
for e, p in zip(elements,points):
	to_check = [e]
	if e.Id in children:
		to_check.extend(children[e.Id])
		
	splitId = None
	for ec in to_check:
		if isinstance(ec,Autodesk.Revit.DB.Plumbing.Pipe):
			try:
				splitId = Autodesk.Revit.DB.Plumbing.PlumbingUtils.BreakCurve(doc, ec.Id, p)
				break
			except:
				pass				
		elif isinstance(ec,Autodesk.Revit.DB.Mechanical.Duct):
			try:
				splitId = Autodesk.Revit.DB.Mechanical.MechanicalUtils.BreakCurve(doc, ec.Id, p)
				break
			except:
				pass
		elif isinstance(ec,Autodesk.Revit.DB.FamilyInstance) and ec.CanSplit :
			try:
				if ec.Location.ToString() == 'Autodesk.Revit.DB.LocationCurve':
					curvB = ec.Location.Curve
				elif ElementId(BuiltInCategory.OST_StructuralColumns) == ec.Category.Id and not ec.IsSlantedColumn :
					curvB = colCurve(ec)
				lenBeam = curvB.Length 
				param = (curvB.GetEndPoint(0).DistanceTo(p)) / lenBeam
				splitId = ec.Split(param)
				break
			except:
				pass
		elif isinstance(ec,Autodesk.Revit.DB.Wall):
			try:
				splitId = splitWall(ec,p)
				break
			except:
				pass
	if splitId:
		split = doc.GetElement(splitId)
		if hasattr(split,"ConnectorManager"):
			newPipeConnectors = split.ConnectorManager.Connectors
			#Check
			connA = None
			connB = None
			for c in ec.ConnectorManager.Connectors:
				pc = c.Origin
				#get connectorB near to connectorA
				nearest = [x for x in newPipeConnectors if pc.DistanceTo(x.Origin) &lt; 0.01]
				#If exists assign
				if nearest:
					connA = c
					connB = nearest[0]
			#Create fitting
			try:
				fittings.append(doc.Create.NewUnionFitting(connA, connB))
			except:pass
		
		if e.Id in children:
			children[e.Id].append(split)
		else:
			children[e.Id] = [split]
		parents.append(ec)
		childs.append(split)
	else:
		parents.append(None)
		childs.append(None)
TransactionManager.Instance.TransactionTaskDone()
			
OUT = parents,childs,fittings</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="dcf764cb-206f-4903-9c62-ea892756257e" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-5.98925337246635" y="217.560744026013" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//As many elements as points&#xD;&#xA;element:var[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="3ebc2af8-ec4d-4e03-979f-90a589381496" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="612.094162790519" y="234.455955911058" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Parents" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="2bb660cf-daa8-4c37-9b8e-97c6b8ab0e8f" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="456.561180116407" y="239.367127300924" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x[0];&#xA;x[1];&#xA;x[2];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="7cc9d267-0fad-44ba-babe-b7d4c8bcbb9a" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="612.303112293472" y="292.58455253135" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Children" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="bf6c41b1-0f50-4587-8f99-f1943920e3ad" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="613.423850066829" y="356.382435433954" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="//For duct and pipes&#xD;&#xA;Fittings" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f5a673cb-3eb9-45d0-9acd-95481a795305" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-3.06625051909089" y="301.320714494103" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//As many points as elements&#xD;&#xA;point:var[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="1d4d0a3e-8a11-49fe-b1e4-c3e725b4ca4e" start_index="0" end="2bb660cf-daa8-4c37-9b8e-97c6b8ab0e8f" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="dcf764cb-206f-4903-9c62-ea892756257e" start_index="0" end="1d4d0a3e-8a11-49fe-b1e4-c3e725b4ca4e" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2bb660cf-daa8-4c37-9b8e-97c6b8ab0e8f" start_index="0" end="3ebc2af8-ec4d-4e03-979f-90a589381496" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2bb660cf-daa8-4c37-9b8e-97c6b8ab0e8f" start_index="1" end="7cc9d267-0fad-44ba-babe-b7d4c8bcbb9a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2bb660cf-daa8-4c37-9b8e-97c6b8ab0e8f" start_index="2" end="bf6c41b1-0f50-4587-8f99-f1943920e3ad" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f5a673cb-3eb9-45d0-9acd-95481a795305" start_index="0" end="1d4d0a3e-8a11-49fe-b1e4-c3e725b4ca4e" end_index="1" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>