<Workspace Version="1.3.4.6666" X="223.717897730788" Y="3.39552787063514" zoom="0.747692817123325" ScaleFactor="1" Name="Create Compound Layer" Description="Creates a new layer at the specified index in the compound system family (wall, floor, roof or ceiling)." ID="40d7c9d6-d751-42ee-b10a-6a99e851e27d" Category="GeniusLoci.CompoundStructure">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="d80d29ef-f1f3-473d-a627-73a725d64826" type="PythonNodeModels.PythonNode" nickname="Python Script" x="293.605641934867" y="377.866994742962" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="5">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <PortInfo index="4" default="False" />
      <Script>#Alban de Chasteigner 2020
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com

import clr
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

import System
from System.Collections.Generic import IDictionary

UIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits

def tolist(obj1):
    if hasattr(obj1,"__iter__"): return obj1
    else: return [obj1]

elements = tolist(UnwrapElement(IN[0]))
functions = tolist(IN[1])
materials = tolist(UnwrapElement(IN[2]))
widths = tolist(IN[3])
index = tolist(IN[4])

outList,boolList = [], []

# Out error Dictionaries for CompoundStructure.IsValid() method...
isValidError = clr.StrongBox[IDictionary[int, CompoundStructureError]]()
isValidError2Layer = clr.StrongBox[IDictionary[int, int]]()

for elem in elements :
	if isinstance(elem, ElementType):
		famType=elem
	elif isinstance(elem, Wall):
		famType = elem.WallType
	elif isinstance(elem, Floor):
		famType = elem.FloorType
	elif isinstance(elem, Roof) or isinstance(elem, FootPrintRoof) or isinstance(elem, ExtrusionRoof) or isinstance(elem, RoofBase) :
		famType = elem.RoofType
	elif isinstance(elem, Ceiling) or isinstance(elem, FaceWall) :
		famType = doc.GetElement(elem.GetTypeId())
	else:
		pass
		
	compStr = famType.GetCompoundStructure()
	layers = list(compStr.GetLayers())
	structural=compStr.StructuralMaterialIndex
	variable=compStr.VariableLayerIndex
	
	idx = 0
	while idx &lt; compStr.LayerCount:
		boolList.Add(compStr.ParticipatesInWrapping(idx))
		idx = idx+1
	firstCoreLayerIndex = compStr.GetFirstCoreLayerIndex()
	lastCoreLayerIndex = compStr.GetLastCoreLayerIndex()
	numberOfShellLayExt = compStr.GetNumberOfShellLayers(ShellLayerType.Exterior)
	numberOfShellLayInt = compStr.GetNumberOfShellLayers(ShellLayerType.Interior)
	
	for indx,material,width,function in zip(index,materials,widths,functions):	
		if isinstance(function, Autodesk.Revit.DB.MaterialFunctionAssignment):
			layerFunction=function
		else:
			layerFunction=System.Enum.Parse(Autodesk.Revit.DB.MaterialFunctionAssignment, function)
		
		compoundStructureLayer = CompoundStructureLayer((UnitUtils.ConvertToInternalUnits(width,UIunit)),layerFunction,material.Id)
		boolList.insert(indx, True)
		layers.insert(indx, compoundStructureLayer)
		if indx &lt; firstCoreLayerIndex :
			numberOfShellLayExt += 1
		if indx &gt; lastCoreLayerIndex:
			numberOfShellLayInt += 1
		if indx &lt;= variable:
			variable += 1
		if indx &lt;= structural: 
			structural += 1
			
	compStr.SetLayers(layers)
	compStr.SetNumberOfShellLayers(ShellLayerType.Exterior, numberOfShellLayExt)
	compStr.SetNumberOfShellLayers(ShellLayerType.Interior, numberOfShellLayInt)
	compStr.StructuralMaterialIndex=structural
	compStr.VariableLayerIndex=variable
		
	idx = 0
	while idx &lt; compStr.LayerCount:
		if idx &lt; compStr.GetFirstCoreLayerIndex() or idx &gt; compStr.GetLastCoreLayerIndex() :
			compStr.SetParticipatesInWrapping(idx, boolList[idx])
		idx = idx+1
			
	TransactionManager.Instance.EnsureInTransaction(doc)
	if compStr.IsValid(doc, isValidError, isValidError2Layer):
		famType.SetCompoundStructure(compStr)
		outList.append(famType)
	else:
		xErrInfo = list(isValidError.Value)	
		outList.append(xErrInfo)
	TransactionManager.Instance.TransactionTaskDone()
	TransactionManager.Instance.ForceCloseTransaction()
		
if isinstance(IN[0], list): OUT = outList
else: OUT = outList[0]</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="84417d48-7491-4a18-9dfc-1adf62ee6973" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-233.594358065133" y="240.866994742962" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ElementOrFamilyType" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="504d6345-9847-4461-ba0c-44d7c2ac168a" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="518.405641934867" y="377.866994742962" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="FamilyType" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="b299e014-d414-46a1-a925-b0a79c4ec7c9" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-233.594358065133" y="324.866994742962" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//String or MaterialFunctionAssignement&#xD;&#xA;//Use the Enumerate LayerFunction node&#xD;&#xA;LayerFunction" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="7b6a639a-cee4-4a5c-86b4-4952eb5977fb" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-233.594358065133" y="434.866994742962" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//One material per layer&#xD;&#xA;material" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f244c8ee-3eb4-442b-9df7-f4322bd58f7d" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-233.594358065133" y="527.866994742962" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//One thickness per layer&#xD;&#xA;Thickness:double[]..[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="79f5b935-f39f-4843-a451-9a646a4e26fe" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-233.594358065133" y="620.866994742962" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//The index of the layer (The first index is 0)&#xD;&#xA;//Counts from the exterior of the wall and from &#xD;&#xA;//the top of roof, floor and ceiling. &#xD;&#xA;index: int[]..[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="d80d29ef-f1f3-473d-a627-73a725d64826" start_index="0" end="504d6345-9847-4461-ba0c-44d7c2ac168a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="84417d48-7491-4a18-9dfc-1adf62ee6973" start_index="0" end="d80d29ef-f1f3-473d-a627-73a725d64826" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b299e014-d414-46a1-a925-b0a79c4ec7c9" start_index="0" end="d80d29ef-f1f3-473d-a627-73a725d64826" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7b6a639a-cee4-4a5c-86b4-4952eb5977fb" start_index="0" end="d80d29ef-f1f3-473d-a627-73a725d64826" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f244c8ee-3eb4-442b-9df7-f4322bd58f7d" start_index="0" end="d80d29ef-f1f3-473d-a627-73a725d64826" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="79f5b935-f39f-4843-a451-9a646a4e26fe" start_index="0" end="d80d29ef-f1f3-473d-a627-73a725d64826" end_index="4" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>